PRGNAME     = sms_sdl

# define regarding OS, which compiler to use
EXESUFFIX = 
TOOLCHAIN = 
CC          = /opt/rs97-toolchain/bin/mipsel-linux-gcc
CCP         = /opt/rs97-toolchain/bin/mipsel-linux-g++
LD          = /opt/rs97-toolchain/bin/mipsel-linux-gcc

# add SDL dependencies
# -msym32 -mlong-calls

CFLAGS		= -fno-pic -fno-pie -Ofast -mlong-calls -mno-abicalls -fdata-sections -ffunction-sections -mips32
CFLAGS		+= -fsingle-precision-constant -falign-functions=2 -mno-check-zero-division
CFLAGS		+= -std=gnu99 -DLSB_FIRST -DMAXIM_PSG
CFLAGS 		+= -Isource -Isource/z80 -Isource/generic -I./source/sound -Isource/unzip -Isource/rs97 -Isource/sound/maxim_sn76489 -Iinclude
#CFLAGS		+= -fprofile-generate -fprofile-dir=/mnt/int_sd/profile
CFLAGS		+= -fprofile-use

CXXFLAGS	= $(CFLAGS) 
LDFLAGS     = -lSDL -lportaudio -lm -flto -lz  -Wl,--as-needed -Wl,--gc-sections -flto -s -no-pie

# Files to be r
SRCDIR    = ./source ./source/unzip ./source/z80 ./source/sound ./source/generic ./source/amini ./source/sound/maxim_sn76489
VPATH     = $(SRCDIR)
SRC_C   = $(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.c))
SRC_CP   = $(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.cpp))
OBJ_C   = $(notdir $(patsubst %.c, %.o, $(SRC_C)))
OBJ_CP   = $(notdir $(patsubst %.cpp, %.o, $(SRC_CP)))
OBJS     = $(OBJ_C) $(OBJ_CP)

# Rules to make executable
$(PRGNAME)$(EXESUFFIX): $(OBJS)  
	$(LD) $(CFLAGS) -o $(PRGNAME)$(EXESUFFIX) $^ $(LDFLAGS)

$(OBJ_C) : %.o : %.c
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_CP) : %.o : %.cpp
	$(CCP) $(CXXFLAGS) -c -o $@ $<

clean:
	rm -f $(PRGNAME)$(EXESUFFIX) *.o
